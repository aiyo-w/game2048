{"ast":null,"code":"var _jsxFileName = \"H:\\\\WQW\\\\Learning_Web\\\\React\\\\react-project1\\\\src\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { SquareComponent } from \"./square-component\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction BackgroundGrid() {\n  _s();\n\n  const generateRandomIndex = (rangeValue, excludeValue) => {\n    if (rangeValue === excludeValue.length) {\n      return;\n    }\n\n    const randomIndex = Math.floor(Math.random() * rangeValue); // 不匹配数组中不包含随机数\n\n    if (!excludeValue.includes(randomIndex)) {\n      return randomIndex;\n    }\n\n    return generateRandomIndex(rangeValue, excludeValue);\n  };\n\n  const [broadData, setBroadData] = useState([0, 0, 0, 0]);\n  const copyBroadData = broadData; //const broadData = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n\n  const size = Math.sqrt(broadData.length);\n  const excludeIndex = []; // 生成种子方块的index\n\n  const seedIndex = generateRandomIndex(broadData.length, excludeIndex);\n  useEffect(() => {\n    copyBroadData[seedIndex] = 1;\n    excludeIndex.push(seedIndex);\n    const newIndex = generateRandomIndex(broadData.length, excludeIndex);\n\n    if (newIndex === undefined) {// TODO:gameover\n    }\n\n    copyBroadData[seedIndex] = 1;\n    excludeIndex.push(newIndex); // 更新broadData\n\n    setBroadData(copyBroadData);\n  }, [broadData]);\n  /* copyBroadData[seedIndex] = 1;\n  // setBroadData(copyBroadData);\n  // broadData[seedIndex] = 1;\n  excludeIndex.push(seedIndex);\n   // 生成新增方块的index\n  const newIndex = generateRandomIndex(broadData.length, excludeIndex);\n  if (newIndex === undefined) {\n    // TODO:gameover\n  }\n  copyBroadData[seedIndex] = 1;\n  // setBroadData(copyBroadData);\n  // broadData[newIndex] = 1;\n  excludeIndex.push(newIndex); */\n\n  const rows = []; // 键盘事件\n\n  /*  useEffect(() => {\n    // 注册键盘事件\n    document.addEventListener(\"keyup\", onkeyup);\n    // 清除键盘事件\n    return () => {\n      document.removeEventListener(\"keyup\", onkeyup);\n    };\n  }, []); */\n\n  /*  document.addEventListener(\"keyup\", onkeyup);\n  onkeyup = (e) => {\n    switch (e.keyCode) {\n      case 37:\n        console.log(\"left\");\n        break;\n      case 38:\n        console.log(\"up\");\n        break;\n      case 39:\n        moveRight();\n        break;\n      case 40:\n        console.log(\"down\");\n        break;\n      default:\n        break;\n    }\n  };\n   // 右移\n  const moveRight = () => {\n    const newBroadData = [];\n    for (let i = 0; i < size; i++) {\n      // 获取每一行\n      const rowData = broadData.slice(i * size, (i + 1) * size);\n       // 将每行中不为0的值保存在数组中\n      const haveValueData = [];\n      rowData.forEach((item, index) => {\n        if (item !== 0) {\n          haveValueData.push(item);\n          // 取出不为0的值后，剩下的全为O\n          rowData[index] = 0;\n        }\n      });\n       if (haveValueData.length > 1) {\n        // 相加\n      } else if (haveValueData.length === 1) {\n        // 移动到最后一位\n        rowData[size - 1] = haveValueData[0];\n      }\n       // 将更改后的数据放入新得board数组中\n      rowData.forEach((item) => {\n        newBroadData.push(item);\n      });\n    }\n    setBroadData(newBroadData);\n  }; */\n  // 生成棋盘\n\n  for (let i = 0; i < broadData.length; i += size) {\n    let columns = [];\n\n    for (let j = 0; j < size; j++) {\n      const column = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-cell\",\n        children: broadData[i + j] <= 0 ? \"\" : /*#__PURE__*/_jsxDEV(SquareComponent, {\n          value: broadData[i + j]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this)\n      }, i + j, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this);\n\n      columns.push(column);\n    }\n\n    const row = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-row\",\n      children: columns\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this);\n\n    rows.push(row);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"background-grid\",\n    children: rows\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 10\n  }, this);\n}\n\n_s(BackgroundGrid, \"xX3cjvdbWQe4PeCjqKnhTt7ENFk=\");\n\n_c = BackgroundGrid;\nReactDOM.render( /*#__PURE__*/_jsxDEV(BackgroundGrid, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 151,\n  columnNumber: 17\n}, this), document.getElementById(\"root\"));\n\nvar _c;\n\n$RefreshReg$(_c, \"BackgroundGrid\");","map":{"version":3,"sources":["H:/WQW/Learning_Web/React/react-project1/src/index.js"],"names":["useEffect","useState","ReactDOM","SquareComponent","BackgroundGrid","generateRandomIndex","rangeValue","excludeValue","length","randomIndex","Math","floor","random","includes","broadData","setBroadData","copyBroadData","size","sqrt","excludeIndex","seedIndex","push","newIndex","undefined","rows","i","columns","j","column","row","render","document","getElementById"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { SquareComponent } from \"./square-component\";\n\nfunction BackgroundGrid() {\n  const generateRandomIndex = (rangeValue, excludeValue) => {\n    if (rangeValue === excludeValue.length) {\n      return;\n    }\n\n    const randomIndex = Math.floor(Math.random() * rangeValue);\n\n    // 不匹配数组中不包含随机数\n    if (!excludeValue.includes(randomIndex)) {\n      return randomIndex;\n    }\n\n    return generateRandomIndex(rangeValue, excludeValue);\n  };\n\n  const [broadData, setBroadData] = useState([0, 0, 0, 0]);\n  const copyBroadData = broadData;\n  //const broadData = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n\n  const size = Math.sqrt(broadData.length);\n\n  const excludeIndex = [];\n  // 生成种子方块的index\n  const seedIndex = generateRandomIndex(broadData.length, excludeIndex);\n\n  useEffect(() => {\n    copyBroadData[seedIndex] = 1;\n    excludeIndex.push(seedIndex);\n\n    const newIndex = generateRandomIndex(broadData.length, excludeIndex);\n    if (newIndex === undefined) {\n      // TODO:gameover\n    }\n    copyBroadData[seedIndex] = 1;\n    excludeIndex.push(newIndex);\n\n    // 更新broadData\n    setBroadData(copyBroadData);\n  }, [broadData]);\n\n  /* copyBroadData[seedIndex] = 1;\n  // setBroadData(copyBroadData);\n  // broadData[seedIndex] = 1;\n  excludeIndex.push(seedIndex);\n\n  // 生成新增方块的index\n  const newIndex = generateRandomIndex(broadData.length, excludeIndex);\n  if (newIndex === undefined) {\n    // TODO:gameover\n  }\n  copyBroadData[seedIndex] = 1;\n  // setBroadData(copyBroadData);\n  // broadData[newIndex] = 1;\n  excludeIndex.push(newIndex); */\n\n  const rows = [];\n\n  // 键盘事件\n  /*  useEffect(() => {\n    // 注册键盘事件\n    document.addEventListener(\"keyup\", onkeyup);\n    // 清除键盘事件\n    return () => {\n      document.removeEventListener(\"keyup\", onkeyup);\n    };\n  }, []); */\n  /*  document.addEventListener(\"keyup\", onkeyup);\n  onkeyup = (e) => {\n    switch (e.keyCode) {\n      case 37:\n        console.log(\"left\");\n        break;\n      case 38:\n        console.log(\"up\");\n        break;\n      case 39:\n        moveRight();\n        break;\n      case 40:\n        console.log(\"down\");\n        break;\n      default:\n        break;\n    }\n  };\n\n  // 右移\n  const moveRight = () => {\n    const newBroadData = [];\n    for (let i = 0; i < size; i++) {\n      // 获取每一行\n      const rowData = broadData.slice(i * size, (i + 1) * size);\n\n      // 将每行中不为0的值保存在数组中\n      const haveValueData = [];\n      rowData.forEach((item, index) => {\n        if (item !== 0) {\n          haveValueData.push(item);\n          // 取出不为0的值后，剩下的全为O\n          rowData[index] = 0;\n        }\n      });\n\n      if (haveValueData.length > 1) {\n        // 相加\n      } else if (haveValueData.length === 1) {\n        // 移动到最后一位\n        rowData[size - 1] = haveValueData[0];\n      }\n\n      // 将更改后的数据放入新得board数组中\n      rowData.forEach((item) => {\n        newBroadData.push(item);\n      });\n    }\n    setBroadData(newBroadData);\n  }; */\n\n  // 生成棋盘\n  for (let i = 0; i < broadData.length; i += size) {\n    let columns = [];\n    for (let j = 0; j < size; j++) {\n      const column = (\n        <div className=\"grid-cell\" key={i + j}>\n          {broadData[i + j] <= 0 ? (\n            \"\"\n          ) : (\n            <SquareComponent value={broadData[i + j]} />\n          )}\n        </div>\n      );\n      columns.push(column);\n    }\n\n    const row = (\n      <div className=\"grid-row\" key={i}>\n        {columns}\n      </div>\n    );\n    rows.push(row);\n  }\n  return <div className=\"background-grid\">{rows}</div>;\n}\n\nReactDOM.render(<BackgroundGrid />, document.getElementById(\"root\"));\n"]},"metadata":{},"sourceType":"module"}