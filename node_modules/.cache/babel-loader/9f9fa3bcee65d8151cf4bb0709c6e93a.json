{"ast":null,"code":"var _jsxFileName = \"H:\\\\WQW\\\\Learning_Web\\\\React\\\\react-project1\\\\src\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState, useCallback } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { SquareComponent } from \"./square-component\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction BackgroundGrid() {\n  _s();\n\n  const [broadData, setBroadData] = useState([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n  const size = Math.sqrt(broadData.length);\n  const excludeIndex = [];\n  const animationArr = [];\n\n  const generateRandomIndex = (rangeValue, excludeValue) => {\n    if (rangeValue === excludeValue.length) {\n      return;\n    }\n\n    const randomIndex = Math.floor(Math.random() * rangeValue); // 不匹配数组中不包含随机数\n\n    if (!excludeValue.includes(randomIndex)) {\n      return randomIndex;\n    }\n\n    return generateRandomIndex(rangeValue, excludeValue);\n  }; // 判断两个数组是否一致\n\n\n  const compareArrays = (arr1, arr2) => {\n    let isSame = true;\n\n    if (arr1.length !== arr2.length) {\n      isSame = false;\n      return isSame;\n    }\n\n    arr1.forEach((item, index) => {\n      if (arr2[index] !== item) {\n        isSame = false;\n      }\n    });\n    return isSame;\n  }; // 返回数字累加了的方块的index\n\n\n  const valueGetBiggerArr = (oldArr, newArr) => {\n    const indexArr = [];\n    oldArr.forEach((item, index) => {\n      if (item < newArr[index]) {\n        indexArr.push(index);\n      }\n    });\n    return indexArr;\n  }; // 更新broadData\n\n\n  useEffect(() => {\n    // 生成种子方块的index\n    const seedIndex = generateRandomIndex(broadData.length, excludeIndex);\n    broadData[seedIndex] = 1;\n    excludeIndex.push(seedIndex);\n    const newIndex = generateRandomIndex(broadData.length, excludeIndex);\n\n    if (newIndex === undefined) {// TODO:gameover\n    }\n\n    broadData[newIndex] = 1;\n    excludeIndex.push(newIndex);\n    setBroadData(broadData.slice());\n  }, []); // 垂直移动\n\n  const verticalMove = code => {\n    const lastBroadData = [...broadData]; // 清空保存已有方块的位置\n\n    excludeIndex.length = 0;\n    let isStartFromHead = true;\n\n    if (code === 38) {\n      isStartFromHead = true;\n    } else {\n      isStartFromHead = false;\n    }\n\n    for (let i = 0; i < size; i++) {\n      let colunmData = [];\n\n      for (let j = 0; j < size; j++) {\n        // 得到每一列的数据\n        colunmData.push(broadData[size * j + i]);\n      }\n\n      let haveValueData = [];\n      colunmData.forEach((item, index) => {\n        if (item !== 0) {\n          haveValueData.push(item); // 取出不为0的值后，剩下的全为O\n\n          colunmData[index] = 0;\n        }\n      });\n\n      if (haveValueData.length > 1) {\n        if (code === 38) {\n          // 往上相加\n          haveValueData = calcAdd(haveValueData);\n        } else {\n          // 往下相加\n          haveValueData = calcAdd(haveValueData.reverse());\n          haveValueData.reverse();\n        }\n      } // 移动位置后的列数据\n\n\n      colunmData = fillRowData(colunmData, haveValueData, isStartFromHead); //const arr = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n      // 将更改后的数据放入新得board数组中\n\n      colunmData.forEach((item, index) => {\n        broadData[size * index + i] = item; // 保存更改位置后，值不为0的index\n\n        if (item !== 0) {\n          excludeIndex.push(size * index + i);\n        }\n      });\n    }\n\n    if (compareArrays(lastBroadData, broadData)) {\n      return;\n    }\n\n    animationArr = valueGetBiggerArr(lastBroadData, broadData); // 新增方块\n\n    const newIndex = generateRandomIndex(broadData.length, excludeIndex);\n\n    if (newIndex === undefined) {// TODO:gameover\n    }\n\n    broadData[newIndex] = 1;\n    excludeIndex.push(newIndex); //setBroadData(broadData.slice());\n  }; // 水平移动\n\n\n  const horizontalMove = code => {\n    const lastBroadData = [...broadData]; // 清空保存已有方块的位置\n\n    excludeIndex.length = 0;\n    let isStartFromHead = true;\n\n    if (code === 37) {\n      isStartFromHead = true;\n    } else {\n      isStartFromHead = false;\n    }\n\n    for (let i = 0; i < size; i++) {\n      // 获取每一行\n      let rowData = broadData.slice(i * size, (i + 1) * size); // 将每行中不为0的值保存在数组中\n\n      let haveValueData = [];\n      rowData.forEach((item, index) => {\n        if (item !== 0) {\n          haveValueData.push(item); // 取出不为0的值后，剩下的全为O\n\n          rowData[index] = 0;\n        }\n      });\n\n      if (haveValueData.length > 1) {\n        if (code === 37) {\n          // 往左相加\n          // 得到相加后的数组\n          haveValueData = calcAdd(haveValueData);\n        } else {\n          // 往右相加\n          // 倒序\n          haveValueData = calcAdd(haveValueData.reverse());\n          haveValueData.reverse();\n        }\n      } // 移动位置后的行数据\n\n\n      rowData = fillRowData(rowData, haveValueData, isStartFromHead); // 将更改后的数据放入新得board数组中\n\n      rowData.forEach((item, index) => {\n        broadData[i * size + index] = item; // 保存更改位置后，值不为0的index\n\n        if (item !== 0) {\n          excludeIndex.push(i * size + index);\n        }\n      });\n    }\n\n    if (compareArrays(lastBroadData, broadData)) {\n      return;\n    } // 新增方块\n\n\n    const newIndex = generateRandomIndex(broadData.length, excludeIndex);\n\n    if (newIndex === undefined) {// TODO:gameover\n    }\n\n    broadData[newIndex] = 1;\n    excludeIndex.push(newIndex); //setBroadData(broadData.slice());\n  }; // 加法计算\n\n\n  const calcAdd = arr => {\n    const newArr = [];\n\n    while (arr.length >= 1) {\n      if (arr.length === 1) {\n        newArr.push(arr[0]);\n        break;\n      } // 截取两位\n\n\n      const calcData = arr.slice(0, 2);\n\n      if (calcData[0] === calcData[1]) {\n        newArr.push(calcData[0] + calcData[1]);\n        arr.splice(0, 2);\n      } else {\n        newArr.push(calcData[0]);\n        arr.splice(0, 1);\n      }\n    }\n\n    return newArr;\n  }; // 行数据填充\n\n\n  const fillRowData = (oldRow, dataArr, isStartFromHead) => {\n    // 从头部开始填充\n    if (isStartFromHead) {\n      dataArr.forEach((item, index) => {\n        oldRow[index] = item;\n      });\n      return oldRow;\n    }\n\n    dataArr.reverse().forEach((item, index) => {\n      oldRow[oldRow.length - 1 - index] = item;\n    });\n    return oldRow;\n  };\n\n  const rows = []; // 生成棋盘\n\n  for (let i = 0; i < broadData.length; i += size) {\n    let columns = [];\n\n    for (let j = 0; j < size; j++) {\n      const column = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-cell\",\n        children: broadData[i + j] <= 0 ? \"\" : /*#__PURE__*/_jsxDEV(SquareComponent, {\n          value: broadData[i + j]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 13\n        }, this)\n      }, i + j, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }, this);\n\n      columns.push(column);\n    }\n\n    const row = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-row\",\n      children: columns\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 7\n    }, this);\n\n    rows.push(row);\n  } // 键盘按键弹起事件\n\n\n  const doKeyDown = useCallback(e => {\n    if (e.repeat) {\n      return;\n    }\n\n    switch (e.keyCode) {\n      case 37:\n        horizontalMove(e.keyCode);\n        break;\n\n      case 38:\n        verticalMove(e.keyCode);\n        break;\n\n      case 39:\n        horizontalMove(e.keyCode);\n        break;\n\n      case 40:\n        verticalMove(e.keyCode);\n        break;\n\n      default:\n        break;\n    }\n  }, []);\n  const doKeyUp = useCallback(e => {\n    if (e.repeat) {\n      return;\n    }\n\n    setBroadData(broadData.slice());\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"background-grid\",\n    onKeyUp: doKeyUp,\n    onKeyDown: doKeyDown,\n    tabIndex: \"0\",\n    children: rows\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 303,\n    columnNumber: 5\n  }, this);\n}\n\n_s(BackgroundGrid, \"9aO2CBnRBFl/pXON41RgYSh8wfY=\");\n\n_c = BackgroundGrid;\nReactDOM.render( /*#__PURE__*/_jsxDEV(BackgroundGrid, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 314,\n  columnNumber: 17\n}, this), document.getElementById(\"root\"));\n\nvar _c;\n\n$RefreshReg$(_c, \"BackgroundGrid\");","map":{"version":3,"sources":["H:/WQW/Learning_Web/React/react-project1/src/index.js"],"names":["useEffect","useState","useCallback","ReactDOM","SquareComponent","BackgroundGrid","broadData","setBroadData","size","Math","sqrt","length","excludeIndex","animationArr","generateRandomIndex","rangeValue","excludeValue","randomIndex","floor","random","includes","compareArrays","arr1","arr2","isSame","forEach","item","index","valueGetBiggerArr","oldArr","newArr","indexArr","push","seedIndex","newIndex","undefined","slice","verticalMove","code","lastBroadData","isStartFromHead","i","colunmData","j","haveValueData","calcAdd","reverse","fillRowData","horizontalMove","rowData","arr","calcData","splice","oldRow","dataArr","rows","columns","column","row","doKeyDown","e","repeat","keyCode","doKeyUp","render","document","getElementById"],"mappings":"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","sourcesContent":["import { useEffect, useState, useCallback } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { SquareComponent } from \"./square-component\";\n\nfunction BackgroundGrid() {\n  const [broadData, setBroadData] = useState([\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  ]);\n  const size = Math.sqrt(broadData.length);\n  const excludeIndex = [];\n  const animationArr = [];\n\n  const generateRandomIndex = (rangeValue, excludeValue) => {\n    if (rangeValue === excludeValue.length) {\n      return;\n    }\n\n    const randomIndex = Math.floor(Math.random() * rangeValue);\n\n    // 不匹配数组中不包含随机数\n    if (!excludeValue.includes(randomIndex)) {\n      return randomIndex;\n    }\n\n    return generateRandomIndex(rangeValue, excludeValue);\n  };\n\n  // 判断两个数组是否一致\n  const compareArrays = (arr1, arr2) => {\n    let isSame = true;\n    if (arr1.length !== arr2.length) {\n      isSame = false;\n      return isSame;\n    }\n    arr1.forEach((item, index) => {\n      if (arr2[index] !== item) {\n        isSame = false;\n      }\n    });\n    return isSame;\n  };\n\n  // 返回数字累加了的方块的index\n  const valueGetBiggerArr = (oldArr, newArr) => {\n    const indexArr = [];\n    oldArr.forEach((item, index) => {\n      if (item < newArr[index]) {\n        indexArr.push(index);\n      }\n    });\n    return indexArr;\n  };\n\n  // 更新broadData\n  useEffect(() => {\n    // 生成种子方块的index\n    const seedIndex = generateRandomIndex(broadData.length, excludeIndex);\n\n    broadData[seedIndex] = 1;\n    excludeIndex.push(seedIndex);\n\n    const newIndex = generateRandomIndex(broadData.length, excludeIndex);\n    if (newIndex === undefined) {\n      // TODO:gameover\n    }\n    broadData[newIndex] = 1;\n    excludeIndex.push(newIndex);\n    setBroadData(broadData.slice());\n  }, []);\n\n  // 垂直移动\n  const verticalMove = (code) => {\n    const lastBroadData = [...broadData];\n\n    // 清空保存已有方块的位置\n    excludeIndex.length = 0;\n\n    let isStartFromHead = true;\n    if (code === 38) {\n      isStartFromHead = true;\n    } else {\n      isStartFromHead = false;\n    }\n\n    for (let i = 0; i < size; i++) {\n      let colunmData = [];\n      for (let j = 0; j < size; j++) {\n        // 得到每一列的数据\n        colunmData.push(broadData[size * j + i]);\n      }\n\n      let haveValueData = [];\n      colunmData.forEach((item, index) => {\n        if (item !== 0) {\n          haveValueData.push(item);\n          // 取出不为0的值后，剩下的全为O\n          colunmData[index] = 0;\n        }\n      });\n\n      if (haveValueData.length > 1) {\n        if (code === 38) {\n          // 往上相加\n          haveValueData = calcAdd(haveValueData);\n        } else {\n          // 往下相加\n          haveValueData = calcAdd(haveValueData.reverse());\n          haveValueData.reverse();\n        }\n      }\n      // 移动位置后的列数据\n      colunmData = fillRowData(colunmData, haveValueData, isStartFromHead);\n\n      //const arr = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n      // 将更改后的数据放入新得board数组中\n      colunmData.forEach((item, index) => {\n        broadData[size * index + i] = item;\n        // 保存更改位置后，值不为0的index\n        if (item !== 0) {\n          excludeIndex.push(size * index + i);\n        }\n      });\n    }\n\n    if (compareArrays(lastBroadData, broadData)) {\n      return;\n    }\n\n    animationArr = valueGetBiggerArr(lastBroadData,broadData);\n\n    // 新增方块\n    const newIndex = generateRandomIndex(broadData.length, excludeIndex);\n    if (newIndex === undefined) {\n      // TODO:gameover\n    }\n    broadData[newIndex] = 1;\n    excludeIndex.push(newIndex);\n    //setBroadData(broadData.slice());\n  };\n\n  // 水平移动\n  const horizontalMove = (code) => {\n    const lastBroadData = [...broadData];\n\n    // 清空保存已有方块的位置\n    excludeIndex.length = 0;\n\n    let isStartFromHead = true;\n    if (code === 37) {\n      isStartFromHead = true;\n    } else {\n      isStartFromHead = false;\n    }\n\n    for (let i = 0; i < size; i++) {\n      // 获取每一行\n      let rowData = broadData.slice(i * size, (i + 1) * size);\n\n      // 将每行中不为0的值保存在数组中\n      let haveValueData = [];\n      rowData.forEach((item, index) => {\n        if (item !== 0) {\n          haveValueData.push(item);\n          // 取出不为0的值后，剩下的全为O\n          rowData[index] = 0;\n        }\n      });\n\n      if (haveValueData.length > 1) {\n        if (code === 37) {\n          // 往左相加\n          // 得到相加后的数组\n          haveValueData = calcAdd(haveValueData);\n        } else {\n          // 往右相加\n          // 倒序\n          haveValueData = calcAdd(haveValueData.reverse());\n          haveValueData.reverse();\n        }\n      }\n\n      // 移动位置后的行数据\n      rowData = fillRowData(rowData, haveValueData, isStartFromHead);\n\n      // 将更改后的数据放入新得board数组中\n      rowData.forEach((item, index) => {\n        broadData[i * size + index] = item;\n        // 保存更改位置后，值不为0的index\n        if (item !== 0) {\n          excludeIndex.push(i * size + index);\n        }\n      });\n    }\n\n    if (compareArrays(lastBroadData, broadData)) {\n      return;\n    }\n\n    // 新增方块\n    const newIndex = generateRandomIndex(broadData.length, excludeIndex);\n    if (newIndex === undefined) {\n      // TODO:gameover\n    }\n    broadData[newIndex] = 1;\n    excludeIndex.push(newIndex);\n    //setBroadData(broadData.slice());\n  };\n\n  // 加法计算\n  const calcAdd = (arr) => {\n    const newArr = [];\n    while (arr.length >= 1) {\n      if (arr.length === 1) {\n        newArr.push(arr[0]);\n        break;\n      }\n      // 截取两位\n      const calcData = arr.slice(0, 2);\n\n      if (calcData[0] === calcData[1]) {\n        newArr.push(calcData[0] + calcData[1]);\n        arr.splice(0, 2);\n      } else {\n        newArr.push(calcData[0]);\n        arr.splice(0, 1);\n      }\n    }\n    return newArr;\n  };\n\n  // 行数据填充\n  const fillRowData = (oldRow, dataArr, isStartFromHead) => {\n    // 从头部开始填充\n    if (isStartFromHead) {\n      dataArr.forEach((item, index) => {\n        oldRow[index] = item;\n      });\n      return oldRow;\n    }\n\n    dataArr.reverse().forEach((item, index) => {\n      oldRow[oldRow.length - 1 - index] = item;\n    });\n    return oldRow;\n  };\n\n  const rows = [];\n  // 生成棋盘\n  for (let i = 0; i < broadData.length; i += size) {\n    let columns = [];\n    for (let j = 0; j < size; j++) {\n      const column = (\n        <div className=\"grid-cell\" key={i + j}>\n          {broadData[i + j] <= 0 ? (\n            \"\"\n          ) : (\n            <SquareComponent value={broadData[i + j]} />\n          )}\n        </div>\n      );\n      columns.push(column);\n    }\n\n    const row = (\n      <div className=\"grid-row\" key={i}>\n        {columns}\n      </div>\n    );\n    rows.push(row);\n  }\n\n  // 键盘按键弹起事件\n  const doKeyDown = useCallback((e) => {\n    if (e.repeat) {\n      return;\n    }\n    switch (e.keyCode) {\n      case 37:\n        horizontalMove(e.keyCode);\n        break;\n      case 38:\n        verticalMove(e.keyCode);\n        break;\n      case 39:\n        horizontalMove(e.keyCode);\n        break;\n      case 40:\n        verticalMove(e.keyCode);\n        break;\n      default:\n        break;\n    }\n  }, []);\n  const doKeyUp = useCallback((e) => {\n    if (e.repeat) {\n      return;\n    }\n    setBroadData(broadData.slice());\n  }, []);\n\n  return (\n    <div\n      className=\"background-grid\"\n      onKeyUp={doKeyUp}\n      onKeyDown={doKeyDown}\n      tabIndex=\"0\"\n    >\n      {rows}\n    </div>\n  );\n}\n\nReactDOM.render(<BackgroundGrid />, document.getElementById(\"root\"));\n"]},"metadata":{},"sourceType":"module"}