{"ast":null,"code":"var _jsxFileName = \"H:\\\\WQW\\\\Learning_Web\\\\React\\\\react-project1\\\\src\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState, useCallback } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { SquareComponent } from \"./square-component\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction BackgroundGrid() {\n  _s();\n\n  const [broadData, setBroadData] = useState([0, 0, 0, 0, 0, 0, 0, 0, 0]);\n  const size = Math.sqrt(broadData.length);\n  const excludeIndex = [];\n\n  const generateRandomIndex = (rangeValue, excludeValue) => {\n    if (rangeValue === excludeValue.length) {\n      return;\n    }\n\n    const randomIndex = Math.floor(Math.random() * rangeValue); // 不匹配数组中不包含随机数\n\n    if (!excludeValue.includes(randomIndex)) {\n      return randomIndex;\n    }\n\n    return generateRandomIndex(rangeValue, excludeValue);\n  }; // 判断两个数组是否一致\n\n\n  const compareArrays = (arr1, arr2) => {\n    if (arr1.length !== arr2.length) {\n      return false;\n    }\n\n    arr1.forEach((item, index) => {\n      if (arr2[index] !== item) {\n        return false;\n      }\n    });\n    return true;\n  };\n\n  const test1 = [1, 3, 4];\n  const test2 = [1, 34];\n  console.log(compareArrays(test1, test2)); // 更新broadData\n\n  useEffect(() => {\n    // 生成种子方块的index\n    const seedIndex = generateRandomIndex(broadData.length, excludeIndex);\n    broadData[seedIndex] = 1;\n    excludeIndex.push(seedIndex);\n    const newIndex = generateRandomIndex(broadData.length, excludeIndex);\n\n    if (newIndex === undefined) {// TODO:gameover\n    }\n\n    broadData[newIndex] = 1;\n    excludeIndex.push(newIndex);\n    setBroadData(broadData.slice());\n  }, []); // 垂直移动\n\n  const verticalMove = code => {\n    // 清空保存已有方块的位置\n    excludeIndex.length = 0;\n    let isStartFromHead = true;\n\n    if (code === 38) {\n      isStartFromHead = true;\n    } else {\n      isStartFromHead = false;\n    }\n\n    for (let i = 0; i < size; i++) {\n      let colunmData = [];\n\n      for (let j = 0; j < size; j++) {\n        // 得到每一列的数据\n        colunmData.push(broadData[size * j + i]);\n      }\n\n      let haveValueData = [];\n      colunmData.forEach((item, index) => {\n        if (item !== 0) {\n          haveValueData.push(item); // 取出不为0的值后，剩下的全为O\n\n          colunmData[index] = 0;\n        }\n      });\n\n      if (haveValueData.length > 1) {\n        if (code === 38) {\n          // 往上相加\n          haveValueData = calcAdd(haveValueData);\n        } else {\n          // 往下相加\n          haveValueData = calcAdd(haveValueData.reverse());\n          haveValueData.reverse();\n        }\n      } // 移动位置后的列数据\n\n\n      colunmData = fillRowData(colunmData, haveValueData, isStartFromHead); //const arr = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n      // 将更改后的数据放入新得board数组中\n\n      colunmData.forEach((item, index) => {\n        broadData[size * index + i] = item; // 保存更改位置后，值不为0的index\n\n        if (item !== 0) {\n          excludeIndex.push(size * index + i);\n        }\n      });\n    } // 新增方块\n\n\n    const newIndex = generateRandomIndex(broadData.length, excludeIndex);\n\n    if (newIndex === undefined) {// TODO:gameover\n    }\n\n    broadData[newIndex] = 1;\n    excludeIndex.push(newIndex);\n    setBroadData(broadData.slice());\n  }; // 水平移动\n\n\n  const horizontalMove = code => {\n    const newBroadData = [...broadData]; // 清空保存已有方块的位置\n\n    excludeIndex.length = 0;\n    let isStartFromHead = true;\n\n    if (code === 37) {\n      isStartFromHead = true;\n    } else {\n      isStartFromHead = false;\n    }\n\n    for (let i = 0; i < size; i++) {\n      // 获取每一行\n      let rowData = newBroadData.slice(i * size, (i + 1) * size); // 将每行中不为0的值保存在数组中\n\n      let haveValueData = [];\n      rowData.forEach((item, index) => {\n        if (item !== 0) {\n          haveValueData.push(item); // 取出不为0的值后，剩下的全为O\n\n          rowData[index] = 0;\n        }\n      });\n\n      if (haveValueData.length > 1) {\n        if (code === 37) {\n          // 往左相加\n          // 得到相加后的数组\n          haveValueData = calcAdd(haveValueData);\n        } else {\n          // 往右相加\n          // 倒序\n          haveValueData = calcAdd(haveValueData.reverse());\n          haveValueData.reverse();\n        }\n      } // 移动位置后的行数据\n\n\n      rowData = fillRowData(rowData, haveValueData, isStartFromHead); // 将更改后的数据放入新得board数组中\n\n      rowData.forEach((item, index) => {\n        newBroadData[i * size + index] = item; // 保存更改位置后，值不为0的index\n\n        if (item !== 0) {\n          excludeIndex.push(i * size + index);\n        }\n      });\n    }\n\n    console.log(\"newBroadData: \" + newBroadData);\n    console.log(\"broadData2: \" + broadData); // 新增方块\n\n    const newIndex = generateRandomIndex(broadData.length, excludeIndex);\n\n    if (newIndex === undefined) {// TODO:gameover\n    }\n\n    broadData[newIndex] = 1;\n    excludeIndex.push(newIndex);\n    setBroadData(broadData.slice());\n  }; // 加法计算\n\n\n  const calcAdd = arr => {\n    const newArr = [];\n\n    while (arr.length >= 1) {\n      if (arr.length === 1) {\n        newArr.push(arr[0]);\n        break;\n      } // 截取两位\n\n\n      const calcData = arr.slice(0, 2);\n\n      if (calcData[0] === calcData[1]) {\n        newArr.push(calcData[0] + calcData[1]);\n        arr.splice(0, 2);\n      } else {\n        newArr.push(calcData[0]);\n        arr.splice(0, 1);\n      }\n    }\n\n    return newArr;\n  }; // 行数据填充\n\n\n  const fillRowData = (oldRow, dataArr, isStartFromHead) => {\n    // 从头部开始填充\n    if (isStartFromHead) {\n      dataArr.forEach((item, index) => {\n        oldRow[index] = item;\n      });\n      return oldRow;\n    }\n\n    dataArr.reverse().forEach((item, index) => {\n      oldRow[oldRow.length - 1 - index] = item;\n    });\n    return oldRow;\n  };\n\n  const rows = []; // 生成棋盘\n\n  for (let i = 0; i < broadData.length; i += size) {\n    let columns = [];\n\n    for (let j = 0; j < size; j++) {\n      const column = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-cell\",\n        children: broadData[i + j] <= 0 ? \"\" : /*#__PURE__*/_jsxDEV(SquareComponent, {\n          value: broadData[i + j]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 13\n        }, this)\n      }, i + j, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this);\n\n      columns.push(column);\n    }\n\n    const row = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-row\",\n      children: columns\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this);\n\n    rows.push(row);\n  } // 键盘按键弹起事件\n\n\n  const doKeyUp = useCallback(e => {\n    if (e.repeat) {\n      return;\n    }\n\n    switch (e.keyCode) {\n      case 37:\n        horizontalMove(e.keyCode);\n        break;\n\n      case 38:\n        verticalMove(e.keyCode);\n        break;\n\n      case 39:\n        horizontalMove(e.keyCode);\n        break;\n\n      case 40:\n        verticalMove(e.keyCode);\n        break;\n\n      default:\n        break;\n    }\n  }, []);\n  const doKeyDown = useCallback(e => {\n    if (e.repeat) {\n      return;\n    } // console.log(1);\n\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"background-grid\",\n    onKeyUp: doKeyUp,\n    onKeyDown: doKeyDown,\n    tabIndex: \"0\",\n    children: rows\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 283,\n    columnNumber: 5\n  }, this);\n}\n\n_s(BackgroundGrid, \"dbGrdXy/hlHXtmcCUcOrjbjK5Rw=\");\n\n_c = BackgroundGrid;\nReactDOM.render( /*#__PURE__*/_jsxDEV(BackgroundGrid, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 294,\n  columnNumber: 17\n}, this), document.getElementById(\"root\"));\n\nvar _c;\n\n$RefreshReg$(_c, \"BackgroundGrid\");","map":{"version":3,"sources":["H:/WQW/Learning_Web/React/react-project1/src/index.js"],"names":["useEffect","useState","useCallback","ReactDOM","SquareComponent","BackgroundGrid","broadData","setBroadData","size","Math","sqrt","length","excludeIndex","generateRandomIndex","rangeValue","excludeValue","randomIndex","floor","random","includes","compareArrays","arr1","arr2","forEach","item","index","test1","test2","console","log","seedIndex","push","newIndex","undefined","slice","verticalMove","code","isStartFromHead","i","colunmData","j","haveValueData","calcAdd","reverse","fillRowData","horizontalMove","newBroadData","rowData","arr","newArr","calcData","splice","oldRow","dataArr","rows","columns","column","row","doKeyUp","e","repeat","keyCode","doKeyDown","render","document","getElementById"],"mappings":"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","sourcesContent":["import { useEffect, useState, useCallback } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { SquareComponent } from \"./square-component\";\n\nfunction BackgroundGrid() {\n  const [broadData, setBroadData] = useState([0, 0, 0, 0, 0, 0, 0, 0, 0]);\n  const size = Math.sqrt(broadData.length);\n  const excludeIndex = [];\n\n  const generateRandomIndex = (rangeValue, excludeValue) => {\n    if (rangeValue === excludeValue.length) {\n      return;\n    }\n\n    const randomIndex = Math.floor(Math.random() * rangeValue);\n\n    // 不匹配数组中不包含随机数\n    if (!excludeValue.includes(randomIndex)) {\n      return randomIndex;\n    }\n\n    return generateRandomIndex(rangeValue, excludeValue);\n  };\n\n  // 判断两个数组是否一致\n  const compareArrays = (arr1, arr2) => {\n    if (arr1.length !== arr2.length) {\n      return false;\n    }\n    arr1.forEach((item, index) => {\n      if (arr2[index] !== item) {\n        return false;\n      }\n    });\n    return true;\n  };\n\n  const test1 = [1, 3, 4];\n  const test2 = [1, 34];\n  console.log(compareArrays(test1, test2));\n\n\n  // 更新broadData\n  useEffect(() => {\n    // 生成种子方块的index\n    const seedIndex = generateRandomIndex(broadData.length, excludeIndex);\n\n    broadData[seedIndex] = 1;\n    excludeIndex.push(seedIndex);\n\n    const newIndex = generateRandomIndex(broadData.length, excludeIndex);\n    if (newIndex === undefined) {\n      // TODO:gameover\n    }\n    broadData[newIndex] = 1;\n    excludeIndex.push(newIndex);\n    setBroadData(broadData.slice());\n  }, []);\n\n  // 垂直移动\n  const verticalMove = (code) => {\n    // 清空保存已有方块的位置\n    excludeIndex.length = 0;\n\n    let isStartFromHead = true;\n    if (code === 38) {\n      isStartFromHead = true;\n    } else {\n      isStartFromHead = false;\n    }\n\n    for (let i = 0; i < size; i++) {\n      let colunmData = [];\n      for (let j = 0; j < size; j++) {\n        // 得到每一列的数据\n        colunmData.push(broadData[size * j + i]);\n      }\n\n      let haveValueData = [];\n      colunmData.forEach((item, index) => {\n        if (item !== 0) {\n          haveValueData.push(item);\n          // 取出不为0的值后，剩下的全为O\n          colunmData[index] = 0;\n        }\n      });\n\n      if (haveValueData.length > 1) {\n        if (code === 38) {\n          // 往上相加\n          haveValueData = calcAdd(haveValueData);\n        } else {\n          // 往下相加\n          haveValueData = calcAdd(haveValueData.reverse());\n          haveValueData.reverse();\n        }\n      }\n      // 移动位置后的列数据\n      colunmData = fillRowData(colunmData, haveValueData, isStartFromHead);\n\n      //const arr = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n      // 将更改后的数据放入新得board数组中\n      colunmData.forEach((item, index) => {\n        broadData[size * index + i] = item;\n        // 保存更改位置后，值不为0的index\n        if (item !== 0) {\n          excludeIndex.push(size * index + i);\n        }\n      });\n    }\n    // 新增方块\n    const newIndex = generateRandomIndex(broadData.length, excludeIndex);\n    if (newIndex === undefined) {\n      // TODO:gameover\n    }\n    broadData[newIndex] = 1;\n    excludeIndex.push(newIndex);\n    setBroadData(broadData.slice());\n  };\n\n  // 水平移动\n  const horizontalMove = (code) => {\n    const newBroadData = [...broadData];\n\n    // 清空保存已有方块的位置\n    excludeIndex.length = 0;\n\n    let isStartFromHead = true;\n    if (code === 37) {\n      isStartFromHead = true;\n    } else {\n      isStartFromHead = false;\n    }\n\n    for (let i = 0; i < size; i++) {\n      // 获取每一行\n      let rowData = newBroadData.slice(i * size, (i + 1) * size);\n\n      // 将每行中不为0的值保存在数组中\n      let haveValueData = [];\n      rowData.forEach((item, index) => {\n        if (item !== 0) {\n          haveValueData.push(item);\n          // 取出不为0的值后，剩下的全为O\n          rowData[index] = 0;\n        }\n      });\n\n      if (haveValueData.length > 1) {\n        if (code === 37) {\n          // 往左相加\n          // 得到相加后的数组\n          haveValueData = calcAdd(haveValueData);\n        } else {\n          // 往右相加\n          // 倒序\n          haveValueData = calcAdd(haveValueData.reverse());\n          haveValueData.reverse();\n        }\n      }\n\n      // 移动位置后的行数据\n      rowData = fillRowData(rowData, haveValueData, isStartFromHead);\n\n      // 将更改后的数据放入新得board数组中\n      rowData.forEach((item, index) => {\n        newBroadData[i * size + index] = item;\n        // 保存更改位置后，值不为0的index\n        if (item !== 0) {\n          excludeIndex.push(i * size + index);\n        }\n      });\n    }\n\n    console.log(\"newBroadData: \" + newBroadData);\n\n    console.log(\"broadData2: \" + broadData);\n\n    // 新增方块\n    const newIndex = generateRandomIndex(broadData.length, excludeIndex);\n    if (newIndex === undefined) {\n      // TODO:gameover\n    }\n    broadData[newIndex] = 1;\n    excludeIndex.push(newIndex);\n    setBroadData(broadData.slice());\n  };\n\n  // 加法计算\n  const calcAdd = (arr) => {\n    const newArr = [];\n    while (arr.length >= 1) {\n      if (arr.length === 1) {\n        newArr.push(arr[0]);\n        break;\n      }\n      // 截取两位\n      const calcData = arr.slice(0, 2);\n\n      if (calcData[0] === calcData[1]) {\n        newArr.push(calcData[0] + calcData[1]);\n        arr.splice(0, 2);\n      } else {\n        newArr.push(calcData[0]);\n        arr.splice(0, 1);\n      }\n    }\n    return newArr;\n  };\n\n  // 行数据填充\n  const fillRowData = (oldRow, dataArr, isStartFromHead) => {\n    // 从头部开始填充\n    if (isStartFromHead) {\n      dataArr.forEach((item, index) => {\n        oldRow[index] = item;\n      });\n      return oldRow;\n    }\n\n    dataArr.reverse().forEach((item, index) => {\n      oldRow[oldRow.length - 1 - index] = item;\n    });\n    return oldRow;\n  };\n\n  const rows = [];\n  // 生成棋盘\n  for (let i = 0; i < broadData.length; i += size) {\n    let columns = [];\n    for (let j = 0; j < size; j++) {\n      const column = (\n        <div className=\"grid-cell\" key={i + j}>\n          {broadData[i + j] <= 0 ? (\n            \"\"\n          ) : (\n            <SquareComponent value={broadData[i + j]} />\n          )}\n        </div>\n      );\n      columns.push(column);\n    }\n\n    const row = (\n      <div className=\"grid-row\" key={i}>\n        {columns}\n      </div>\n    );\n    rows.push(row);\n  }\n\n  // 键盘按键弹起事件\n  const doKeyUp = useCallback((e) => {\n    if (e.repeat) {\n      return;\n    }\n    switch (e.keyCode) {\n      case 37:\n        horizontalMove(e.keyCode);\n        break;\n      case 38:\n        verticalMove(e.keyCode);\n        break;\n      case 39:\n        horizontalMove(e.keyCode);\n        break;\n      case 40:\n        verticalMove(e.keyCode);\n        break;\n      default:\n        break;\n    }\n  }, []);\n  const doKeyDown = useCallback((e) => {\n    if (e.repeat) {\n      return;\n    }\n    // console.log(1);\n  }, []);\n\n  return (\n    <div\n      className=\"background-grid\"\n      onKeyUp={doKeyUp}\n      onKeyDown={doKeyDown}\n      tabIndex=\"0\"\n    >\n      {rows}\n    </div>\n  );\n}\n\nReactDOM.render(<BackgroundGrid />, document.getElementById(\"root\"));\n"]},"metadata":{},"sourceType":"module"}