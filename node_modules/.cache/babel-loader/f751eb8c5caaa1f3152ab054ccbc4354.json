{"ast":null,"code":"var _jsxFileName = \"H:\\\\WQW\\\\Learning_Web\\\\React\\\\react-project1\\\\src\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { SquareComponent } from \"./square-component\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction BackgroundGrid() {\n  _s();\n\n  const [broadData, setBroadData] = useState([0, 0, 0, 0]);\n  const copyBroadData = broadData; //const broadData = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n\n  const size = Math.sqrt(broadData.length);\n  useEffect(() => {\n    const generateRandomIndex = (rangeValue, excludeValue) => {\n      if (rangeValue === excludeValue.length) {\n        return;\n      }\n\n      const randomIndex = Math.floor(Math.random() * rangeValue); // 不匹配数组中不包含随机数\n\n      if (!excludeValue.includes(randomIndex)) {\n        return randomIndex;\n      }\n\n      return generateRandomIndex(rangeValue, excludeValue);\n    };\n\n    const excludeIndex = []; // 生成种子方块的index\n\n    const seedIndex = generateRandomIndex(broadData.length, excludeIndex);\n    copyBroadData[seedIndex] = 1;\n    excludeIndex.push(seedIndex);\n    const newIndex = generateRandomIndex(broadData.length, excludeIndex);\n\n    if (newIndex === undefined) {// TODO:gameover\n    }\n\n    copyBroadData[newIndex] = 1;\n    excludeIndex.push(newIndex); // 更新broadData\n\n    setBroadData(copyBroadData);\n    const rows = []; // 生成棋盘\n\n    for (let i = 0; i < broadData.length; i += size) {\n      let columns = [];\n\n      for (let j = 0; j < size; j++) {\n        const column = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid-cell\",\n          children: broadData[i + j] <= 0 ? \"\" : /*#__PURE__*/_jsxDEV(SquareComponent, {\n            value: broadData[i + j]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this)\n        }, i + j, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 9\n        }, this);\n\n        columns.push(column);\n      }\n\n      const row = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-row\",\n        children: columns\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }, this);\n\n      rows.push(row);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"background-grid\",\n      children: rows\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 10\n    }, this);\n  }, [broadData, copyBroadData, size]);\n  /* copyBroadData[seedIndex] = 1;\n  // setBroadData(copyBroadData);\n  // broadData[seedIndex] = 1;\n  excludeIndex.push(seedIndex);\n   // 生成新增方块的index\n  const newIndex = generateRandomIndex(broadData.length, excludeIndex);\n  if (newIndex === undefined) {\n    // TODO:gameover\n  }\n  copyBroadData[seedIndex] = 1;\n  // setBroadData(copyBroadData);\n  // broadData[newIndex] = 1;\n  excludeIndex.push(newIndex); */\n  // 键盘事件\n\n  /*  useEffect(() => {\n    // 注册键盘事件\n    document.addEventListener(\"keyup\", onkeyup);\n    // 清除键盘事件\n    return () => {\n      document.removeEventListener(\"keyup\", onkeyup);\n    };\n  }, []); */\n\n  /*  document.addEventListener(\"keyup\", onkeyup);\n  onkeyup = (e) => {\n    switch (e.keyCode) {\n      case 37:\n        console.log(\"left\");\n        break;\n      case 38:\n        console.log(\"up\");\n        break;\n      case 39:\n        moveRight();\n        break;\n      case 40:\n        console.log(\"down\");\n        break;\n      default:\n        break;\n    }\n  };\n   // 右移\n  const moveRight = () => {\n    const newBroadData = [];\n    for (let i = 0; i < size; i++) {\n      // 获取每一行\n      const rowData = broadData.slice(i * size, (i + 1) * size);\n       // 将每行中不为0的值保存在数组中\n      const haveValueData = [];\n      rowData.forEach((item, index) => {\n        if (item !== 0) {\n          haveValueData.push(item);\n          // 取出不为0的值后，剩下的全为O\n          rowData[index] = 0;\n        }\n      });\n       if (haveValueData.length > 1) {\n        // 相加\n      } else if (haveValueData.length === 1) {\n        // 移动到最后一位\n        rowData[size - 1] = haveValueData[0];\n      }\n       // 将更改后的数据放入新得board数组中\n      rowData.forEach((item) => {\n        newBroadData.push(item);\n      });\n    }\n    setBroadData(newBroadData);\n  }; */\n}\n\n_s(BackgroundGrid, \"xX3cjvdbWQe4PeCjqKnhTt7ENFk=\");\n\n_c = BackgroundGrid;\nReactDOM.render( /*#__PURE__*/_jsxDEV(BackgroundGrid, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 152,\n  columnNumber: 17\n}, this), document.getElementById(\"root\"));\n\nvar _c;\n\n$RefreshReg$(_c, \"BackgroundGrid\");","map":{"version":3,"sources":["H:/WQW/Learning_Web/React/react-project1/src/index.js"],"names":["useEffect","useState","ReactDOM","SquareComponent","BackgroundGrid","broadData","setBroadData","copyBroadData","size","Math","sqrt","length","generateRandomIndex","rangeValue","excludeValue","randomIndex","floor","random","includes","excludeIndex","seedIndex","push","newIndex","undefined","rows","i","columns","j","column","row","render","document","getElementById"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { SquareComponent } from \"./square-component\";\n\nfunction BackgroundGrid() {\n  const [broadData, setBroadData] = useState([0, 0, 0, 0]);\n  const copyBroadData = broadData;\n  //const broadData = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n\n  const size = Math.sqrt(broadData.length);\n\n  useEffect(() => {\n    const generateRandomIndex = (rangeValue, excludeValue) => {\n      if (rangeValue === excludeValue.length) {\n        return;\n      }\n\n      const randomIndex = Math.floor(Math.random() * rangeValue);\n\n      // 不匹配数组中不包含随机数\n      if (!excludeValue.includes(randomIndex)) {\n        return randomIndex;\n      }\n\n      return generateRandomIndex(rangeValue, excludeValue);\n    };\n    const excludeIndex = [];\n    // 生成种子方块的index\n    const seedIndex = generateRandomIndex(broadData.length, excludeIndex);\n\n    copyBroadData[seedIndex] = 1;\n    excludeIndex.push(seedIndex);\n\n    const newIndex = generateRandomIndex(broadData.length, excludeIndex);\n    if (newIndex === undefined) {\n      // TODO:gameover\n    }\n    copyBroadData[newIndex] = 1;\n    excludeIndex.push(newIndex);\n\n    // 更新broadData\n    setBroadData(copyBroadData);\n\n\n    const rows = [];\n  // 生成棋盘\n  for (let i = 0; i < broadData.length; i += size) {\n    let columns = [];\n    for (let j = 0; j < size; j++) {\n      const column = (\n        <div className=\"grid-cell\" key={i + j}>\n          {broadData[i + j] <= 0 ? (\n            \"\"\n          ) : (\n            <SquareComponent value={broadData[i + j]} />\n          )}\n        </div>\n      );\n      columns.push(column);\n    }\n\n    const row = (\n      <div className=\"grid-row\" key={i}>\n        {columns}\n      </div>\n    );\n    rows.push(row);\n  }\n  return <div className=\"background-grid\">{rows}</div>;\n  }, [broadData, copyBroadData, size]);\n\n  /* copyBroadData[seedIndex] = 1;\n  // setBroadData(copyBroadData);\n  // broadData[seedIndex] = 1;\n  excludeIndex.push(seedIndex);\n\n  // 生成新增方块的index\n  const newIndex = generateRandomIndex(broadData.length, excludeIndex);\n  if (newIndex === undefined) {\n    // TODO:gameover\n  }\n  copyBroadData[seedIndex] = 1;\n  // setBroadData(copyBroadData);\n  // broadData[newIndex] = 1;\n  excludeIndex.push(newIndex); */\n\n\n  // 键盘事件\n  /*  useEffect(() => {\n    // 注册键盘事件\n    document.addEventListener(\"keyup\", onkeyup);\n    // 清除键盘事件\n    return () => {\n      document.removeEventListener(\"keyup\", onkeyup);\n    };\n  }, []); */\n  /*  document.addEventListener(\"keyup\", onkeyup);\n  onkeyup = (e) => {\n    switch (e.keyCode) {\n      case 37:\n        console.log(\"left\");\n        break;\n      case 38:\n        console.log(\"up\");\n        break;\n      case 39:\n        moveRight();\n        break;\n      case 40:\n        console.log(\"down\");\n        break;\n      default:\n        break;\n    }\n  };\n\n  // 右移\n  const moveRight = () => {\n    const newBroadData = [];\n    for (let i = 0; i < size; i++) {\n      // 获取每一行\n      const rowData = broadData.slice(i * size, (i + 1) * size);\n\n      // 将每行中不为0的值保存在数组中\n      const haveValueData = [];\n      rowData.forEach((item, index) => {\n        if (item !== 0) {\n          haveValueData.push(item);\n          // 取出不为0的值后，剩下的全为O\n          rowData[index] = 0;\n        }\n      });\n\n      if (haveValueData.length > 1) {\n        // 相加\n      } else if (haveValueData.length === 1) {\n        // 移动到最后一位\n        rowData[size - 1] = haveValueData[0];\n      }\n\n      // 将更改后的数据放入新得board数组中\n      rowData.forEach((item) => {\n        newBroadData.push(item);\n      });\n    }\n    setBroadData(newBroadData);\n  }; */\n  \n}\n\nReactDOM.render(<BackgroundGrid />, document.getElementById(\"root\"));\n"]},"metadata":{},"sourceType":"module"}